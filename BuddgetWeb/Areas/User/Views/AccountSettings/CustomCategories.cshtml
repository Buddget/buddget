@model IEnumerable<Buddget.BLL.DTOs.CategoryDto>
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    ViewData["Title"] = "Custom Categories";
}

<div class="container mt-4">
    <h2 class="text-center mb-4">My Custom Categories</h2>
    <div class="row">
        @foreach (var category in Model)
        {
            <div class="col-auto mb-3">
                <div class="category-pill" data-id="@category.Id" data-name="@category.Name">
                    <button type="button" class="delete-category-btn">&times;</button>
                    <h6 class="category-name">@category.Name</h6>
                </div>
            </div>
        }
    </div>
    <div class="row mt-4 justify-content-center">
        <div class="col-12 col-md-6 col-lg-4">
            <form id="addCategoryForm" class="floating-form">
                @Html.AntiForgeryToken()
                <h2 class="text-center mb-4">Add a Custom Category</h2>
                <div class="input-group">
                    <input type="text" id="newCategoryName" class="form-control" placeholder="Enter category name" />
                    <button type="button" id="addCategoryButton" class="btn custom-btn">Add</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal" id="deleteConfirmationModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the category "<span id="categoryToDelete"></span>"? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteButton">Delete</button>
            </div>
        </div>
    </div>
</div>

<script>
        document.addEventListener('DOMContentLoaded', function() {
        const addCategoryButton = document.getElementById('addCategoryButton');
        const newCategoryNameInput = document.getElementById('newCategoryName');
        let categoryIdToDelete = null;
        const deleteModal = document.getElementById('deleteConfirmationModal');

        function showModal() {
            deleteModal.style.display = 'block';
        }

        function hideModal() {
            deleteModal.style.display = 'none';
        }

        document.querySelector('.close').addEventListener('click', hideModal);
        document.querySelector('.btn-secondary').addEventListener('click', hideModal);

        window.addEventListener('click', function(event) {
            if (event.target === deleteModal) {
                hideModal();
            }
        });

        addCategoryButton.addEventListener('click', async function() {
            const categoryName = newCategoryNameInput.value.trim();
            if (!categoryName) {
                alert('Please enter a category name.');
                return;
            }

            const response = await fetch('/User/AccountSettings/AddCategory', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ categoryName })
            });

            const result = await response.json();
            if (result.success) {
                location.reload();
            } else {
                alert(result.message);
            }
        });

        const deleteCategoryButtons = document.querySelectorAll('.delete-category-btn');
        deleteCategoryButtons.forEach(button => {
            button.addEventListener('click', function() {
                const categoryPill = this.closest('.category-pill');
                categoryIdToDelete = categoryPill.getAttribute('data-id');
                const categoryName = categoryPill.getAttribute('data-name');
                document.getElementById('categoryToDelete').textContent = categoryName;
                showModal();
            });
        });

        document.getElementById('confirmDeleteButton').addEventListener('click', async function() {
            if (categoryIdToDelete) {
                const response = await fetch(`/User/AccountSettings/DeleteCategory/${categoryIdToDelete}`, {
                    method: 'DELETE',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                const result = await response.json();
                if (result.success) {
                    location.reload();
                } else {
                    alert(result.message);
                }
            }
            hideModal();
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const categoryPills = document.querySelectorAll('.category-pill');

        categoryPills.forEach(pill => {
            const categoryName = pill.getAttribute('data-name');
            const colorCode = generateColorFromString(categoryName);
            pill.style.backgroundColor = colorCode;

            const rgb = hexToRgb(colorCode);
            const brightness = (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;

            // Adjust text color
            pill.style.color = brightness < 128 ? 'white' : 'black';

            // Adjust delete button color to be slightly darker or lighter
            const deleteButton = pill.querySelector('.delete-category-btn');
            deleteButton.style.backgroundColor = adjustBrightness(colorCode, brightness < 128 ? 60 : -40);
            deleteButton.style.color = brightness < 128 ? 'black' : 'white';
        });

        function generateColorFromString(str) {
            let hash = 0;
            for (let i = 0; i < str.length; i++) {
                hash = str.charCodeAt(i) + ((hash << 5) - hash);
            }

            let color = '#';
            for (let i = 0; i < 3; i++) {
                const value = (hash >> (i * 8)) & 0xff;
                color += ('00' + value.toString(16)).substr(-2);
            }

            return color;
        }

        function hexToRgb(hex) {
            const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
        }

        function adjustBrightness(hex, amount) {
            let rgb = hexToRgb(hex);
            if (!rgb) return hex;

            rgb.r = Math.min(255, Math.max(0, rgb.r + amount));
            rgb.g = Math.min(255, Math.max(0, rgb.g + amount));
            rgb.b = Math.min(255, Math.max(0, rgb.b + amount));

            return `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;
        }
    });
</script>

<style>
    .category-pill {
        position: relative;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: flex-start;
        transition: all 0.3s ease;
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
        cursor: pointer;
        text-align: center;
        padding: 5px 5px;
        margin: 5px;
        white-space: nowrap;
    }

        .category-pill:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.15);
        }

    .category-name {
        font-weight: 600;
        margin: 0 10px;
        font-size: 0.9rem;
        word-wrap: break-word;
    }

    .delete-category-btn {
        background: #ff4d4d;
        color: white;
        border: none;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        position: relative;
        margin-right: 5px;
        font-size: 0;
    }

        .delete-category-btn::before,
        .delete-category-btn::after {
            content: '';
            position: absolute;
            width: 10px;
            height: 2px;
            background-color: white;
            top: 50%;
            left: 50%;
        }

        .delete-category-btn::before {
            transform: translate(-50%, -50%) rotate(45deg);
        }

        .delete-category-btn::after {
            transform: translate(-50%, -50%) rotate(-45deg);
        }

    .floating-form {
        background: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    .input-group {
        display: flex;
        align-items: center;
    }

        .input-group .form-control {
            flex: 1;
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }

        .input-group .btn {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }

    .custom-btn {
        background-color: #17632d;
        color: white;
        border: none;
        transition: background 0.3s ease, transform 0.2s ease;
    }

        .custom-btn:hover {
            background-color: #145214;
            color: white;
            transform: scale(1.05);
        }

    .modal {
        display: none;
        position: fixed;
        z-index: 1050;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-dialog {
        position: relative;
        width: auto;
        margin: 10% auto;
        max-width: 500px;
    }

    .modal-content {
        position: relative;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid rgba(0, 0, 0, 0.2);
        border-radius: 0.3rem;
        outline: 0;
    }

    .modal-header {
        display: flex;
        align-items: flex-start;
        justify-content: space-between;
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
        border-top-left-radius: 0.3rem;
        border-top-right-radius: 0.3rem;
    }

    .modal-title {
        margin-bottom: 0;
        line-height: 1.5;
    }

    .close {
        padding: 1rem;
        margin: -1rem -1rem -1rem auto;
        cursor: pointer;
    }

    .modal-body {
        position: relative;
        padding: 1rem;
    }

    .modal-footer {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        padding: 1rem;
        border-top: 1px solid #dee2e6;
    }

    .btn-secondary {
        background-color: #6c757d;
        border: none;
        color: white;
        transition: background 0.3s ease, transform 0.2s ease;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
            transform: scale(1.05);
        }

    .btn-danger {
        background-color: #dc3545;
        border: none;
        color: white;
        transition: background 0.3s ease, transform 0.2s ease;
    }

        .btn-danger:hover {
            background-color: #c82333;
            transform: scale(1.05);
        }
</style>
